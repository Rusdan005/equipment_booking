<?php

namespace App\Http\Controllers;

use App\Models\Equipment;
use App\Models\Booking;
use App\Models\Fine;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Storage;
// ‚ùå ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á use Controller ‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
// use App\Http\Controllers\BookingController; 

// ‚ùå Route ‡∏ï‡πâ‡∏≠‡∏á‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡πÑ‡∏ü‡∏•‡πå routes/web.php
// Route::put('/booking/{id}/picked-up', [BookingController::class, 'markAsPickedUp'])
//     ->name('booking.picked');

class BookingController extends Controller
{
    /**
     * üî∏ ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
     */
    public function index()
    {
        $equipments = Equipment::where('is_available', true)->get();
        return view('booking.index', compact('equipments'));
    }

    /**
     * üî∏ ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏à‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
     */
    public function create()
    {
        $equipments = Equipment::where('is_available', true)->get();
        return view('booking.create', compact('equipments'));
    }

    /**
     * üî∏ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
     */
    public function store(Request $request)
    {
        $request->validate([
            'equipment_id' => 'required|exists:equipments,id',
            'borrow_date'  => 'required|date|after_or_equal:today',
            'return_date'  => 'required|date|after:borrow_date',
            'pickup_time'  => 'required',
            'return_time'  => 'required',
            'purpose'      => 'required|string|max:255',
            'location'     => 'nullable|string|max:255',
            'major'        => 'nullable|string|max:255',
            'faculty'      => 'nullable|string|max:255',
            'quantity'     => 'required|integer|min:1',
        ]);

        $equipment = Equipment::findOrFail($request->equipment_id);

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
        if ($request->quantity > $equipment->available) {
            return back()->with('error', '‚ùå ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á!');
        }

        // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
        Booking::create([
            'user_id'      => Auth::id(),
            'equipment_id' => $request->equipment_id,
            'borrow_date'  => $request->borrow_date,
            'return_date'  => $request->return_date,
            'pickup_time'  => $request->pickup_time,
            'return_time'  => $request->return_time,
            'purpose'      => $request->purpose,
            'location'     => $request->location,
            'major'        => $request->major,
            'faculty'      => $request->faculty,
            'quantity'     => $request->quantity,
            'status'       => 'pending',
        ]);

        // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
        $equipment->available = max(0, $equipment->available - $request->quantity);
        if ($equipment->available <= 0) {
            $equipment->is_available = false;
        }
        $equipment->save();

        return redirect()->route('booking.index')
            ->with('success', 'üéâ ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥');
    }

        public function equipmentList()
{
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏à‡∏≠‡∏á
    $equipments = \App\Models\Equipment::where('is_available', 1)
        ->orderBy('name', 'asc')
        ->get();

    // ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤ view
    return view('booking.equipment-list', compact('equipments'));
}

    /**
     * üü¢ ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Staff/Admin)
     */
    public function returnList()
    {
        $bookings = Booking::with(['user', 'equipment'])
            ->orderBy('borrow_date', 'desc')
            ->get();

        return view('booking.return', compact('bookings'));
    }

    /**
     * ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏∑‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå + ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ + ‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ + ‡∏Ñ‡∏¥‡∏î‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö (‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á user/staff)
     */
    public function returnEquipment(Request $request, $id)
    {
        $booking = Booking::with('equipment')->findOrFail($id);
        $today = now();

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå
        if ($request->hasFile('return_photo')) {
            $request->validate([
                'return_photo' => 'required|image|mimes:jpg,jpeg,png|max:2048',
            ]);

            // ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡πÄ‡∏Å‡πà‡∏≤‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            if ($booking->return_photo && Storage::disk('public')->exists($booking->return_photo)) {
                Storage::disk('public')->delete($booking->return_photo);
            }

            // ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô storage/app/public/returns/
            $path = $request->file('return_photo')->store('returns', 'public');
            $booking->return_photo = $path;
        }

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏ä‡πâ‡∏≤
        if ($today->gt($booking->return_date)) {
            $daysLate = $today->diffInDays($booking->return_date);
            $fineAmount = $daysLate * 50; // üí∞ 50 ‡∏ö‡∏≤‡∏ó‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô

            Fine::create([
                'booking_id' => $booking->id,
                'user_id'    => $booking->user_id,
                'amount'     => $fineAmount,
                'reason'     => "‡∏Ñ‡∏∑‡∏ô‡∏ä‡πâ‡∏≤ {$daysLate} ‡∏ß‡∏±‡∏ô",
                'status'     => 'pending',
            ]);

            $booking->status = 'overdue';
        } else {
            $booking->status = 'returned';
        }

        // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô
        $booking->returned_at = $today;
        $booking->save();

        // ‚úÖ ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏ß‡πà‡∏≤‡∏á
        $booking->equipment->available += $booking->quantity;
        $booking->equipment->is_available = true;
        $booking->equipment->save();

        return redirect()->back()->with('success', '‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!');
    }

    /**
     * üì¶ ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô
     */
    public function myPickups()
    {
        $bookings = Booking::with('equipment')
            ->where('user_id', Auth::id())
            ->whereIn('status', ['pending', 'approved', 'picked_up', 'returned', 'overdue'])
            ->orderBy('borrow_date', 'asc')
            ->get();

        return view('booking.my-pickups', compact('bookings'));
    }

    // ‚ú®‚ú®‚ú® [‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà] ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ ‚ú®‚ú®‚ú®
    /**
     * üöö ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô "‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß" (Picked Up)
     */
    public function markAsPickedUp($id)
    {
        $booking = Booking::findOrFail($id);

        // (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥) ‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
        // ‡πÄ‡∏ä‡πà‡∏ô check ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô admin ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á booking ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ 'approved'
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        $booking->status = 'picked_up';
        // $booking->picked_up_at = now(); // (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ô DB)
        $booking->save();

        return redirect()->back()->with('success', 'üöö ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
    }
}